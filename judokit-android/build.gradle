apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'jacoco'
apply plugin: "org.jetbrains.dokka-android"
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'maven-publish'
apply plugin: 'signing'

apply from: '../ktlint.gradle'

allprojects {
    jacoco {
        toolVersion = "0.8.7"
    }
}

dokka {
    includeNonPublic = false
}

android {
    namespace 'com.judopay.judokit.android'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33

        vectorDrawables.useSupportLibrary = true

        consumerProguardFiles 'proguard-rules.pro'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.incremental": "true"]
            }
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                jacoco.excludes = ['jdk.internal.*']
            }
        }
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    api "com.judopay:judo3ds2:1.3.1"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    api "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.annotation:annotation:1.5.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation 'com.google.android.material:material:1.8.0'
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'

    // Room and Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'com.judopay:device-dna:1.1.0'
    implementation "com.mastercard.pbba:merchant-sdk:3.1.0"

    // JUnit 5 framework
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'

    testImplementation 'io.mockk:mockk:1.13.4'
    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'

    testImplementation project(path: ':judokit-android')

    ktlint 'com.pinterest:ktlint:0.47.1'
}

task generateCodeAnalysisReport {
    group 'Reporting'
    description 'Start reporting code analysis tasks (Jacoco & ktlintCheck)'
    dependsOn ":judokit-android:jacocoTestReport"
    dependsOn ":judokit-android:ktlint"
}

task jacocoTestReport(group: 'verification', description: 'Grenerate Jacoco Reports for all android variants')

project.afterEvaluate {
    def variants = android.hasProperty('libraryVariants') ? android.libraryVariants : android.applicationVariants
    variants.forEach {
        tasks.jacocoTestReport.dependsOn(addJacocoTask(it))
    }
}

def addJacocoTask(variant) {
    def variantName = variant.name.capitalize()
    logger.info("Adding jacoco task for variant $variantName")

    // see https://docs.gradle.org/current/dsl/org.gradle.testing.jacoco.tasks.JacocoReport.html
    def taskName = "jacocoTestReport${variantName}"
    def foundTask = project.tasks.findByName(taskName)
    def jacocoTask = foundTask ? foundTask : project.tasks.create(taskName, JacocoReport)

    jacocoTask.dependsOn("test${variantName}UnitTest")
    jacocoTask.group = 'verification'
    jacocoTask.description = "Generate Jacoco Report for variant $variantName"

    jacocoTask.reports {
        csv.enabled false
        html.enabled true
        xml.enabled true
    }

    def excludedFiles = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Activity.*',
            '**/*Fragment.*',
            '**/*DialogFragment.*',
            '**/*ViewModelFactory.*',
            '**/*View.*',
            '**/*Action*.*',
            '**/*Entity.*',
            '**/*Functions.*',
            '**/*Constants.*',
            '**/*WebViewClient.*',
            '**/adapter/**',
            '**/components/**',
            '**/formatting/**',
            '**/db/JudoRoomDatabase.*',
            '**/db/dao/**',
            '**/model/googlepay/**',
            '**/model/JudoResult.*',
            '**/model/PrimaryAccountDetails.*',
            '**/model/Event.*',
            '**/model/PBBAConfiguration.*',
            '**/model/UiConfiguration.*',
            '**/model/JudoError.*',
            '**/api/factory/**',
            '**/api/AppMetaDataProvider.*',
            '**/api/model/request/Address.*',
            '**/api/model/request/BankSaleRequest.*',
            '**/api/model/request/IdealSaleRequest.*',
            '**/api/model/response/CardVerificationResult.*',
            '**/api/model/response/Consumer.*',
            '**/api/model/response/OrderDetails.*',
            '**/api/model/response/Receipts.*',
            '**/api/model/response/BankSaleResponse.*',
            '**/api/model/EnhancedPaymentDetail.*',
            '**/api/model/ConsumerDevice.*',
            '**/api/model/Browser.*',
            '**/api/model/ClientDetails.*',
            '**/api/model/SDKInfo.*',
            '**/api/model/GeoLocation.*',
            '**/api/model/ThreeDSecure.*',
            '**/api/error/DuplicateTransactionError.*',
            '**/api/error/TokenSecretError.*',
            '**/ui/common/ProgressButton.*',
            '**/ui/common/GooglePayButton.*',
            '**/ui/common/PayByBankButton.*',
            '**/service/polling/PollingResult.*'
    ]

    def sourceDirectories = files(variant.sourceSets.java.srcDirs.flatten())
    def classDirectories = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: excludedFiles)

    if (project.plugins.hasPlugin("kotlin-android")) {
        sourceDirectories.from(files(variant.sourceSets.kotlin.srcDirs.flatten()))
        def kotlinTask = tasks.getByName("compile${variantName}Kotlin")
        if (kotlinTask) {
            classDirectories += fileTree(dir: kotlinTask.destinationDirectory, excludes: excludedFiles)
        }
    }

    jacocoTask.sourceDirectories.from = sourceDirectories
    jacocoTask.classDirectories.from = classDirectories
    jacocoTask.executionData.from = files("${buildDir}/jacoco/test${variantName}UnitTest.exec")
    jacocoTask
}

task sourcesJar(type: Jar) {
    archiveClassifier.convention('sources')
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
    // Allow publishing without signing for non-release versions
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing {
    publications {
        release(MavenPublication) {
            artifactId = 'judokit-android'
            artifact sourcesJar
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            pom {
                name = 'Judopay JudoKit-Android'
                description = 'JudoKit-Android is an SDK to assist Android app developers to accept payments.'
                url = 'https://github.com/Judopay/JudoKit-Android'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'judopay'
                        name = 'Judopay'
                        email = 'developersupport@judopay.com'
                        organization = 'Judopay'
                        organizationUrl = 'https://www.judopay.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Judopay/JudoKit-Android.git'
                    developerConnection = 'scm:git:ssh://github.com:Judopay/JudoKit-Android.git'
                    url = 'https://github.com/Judopay/JudoKit-Android'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
