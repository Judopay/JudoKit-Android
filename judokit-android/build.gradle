apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'jacoco'
apply plugin: 'guru.stefma.bintrayrelease'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.incremental":"true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

}

version = android.defaultConfig.versionName

group = 'com.judokit.android'

androidArtifact {
    artifactId = 'judokit-android'
}

publish {
    userOrg = 'judopay'
    desc = 'Android Mobile Payments SDK'
    website = 'https://github.com/JudoPay/JudoKit-Android'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.4'

    implementation 'com.judopay:device-dna:1.0.0'

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation "androidx.core:core:$androidx_core_version"
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.google.android.gms:play-services-wallet:18.0.0'

    // Room and Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'cards.pay:paycardsrecognizer:1.1.0'

    implementation "com.zapp.library:merchant:1.1.0"

    // JUnit 4 framework
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    // Robolectric environment
    testImplementation 'androidx.test:core:1.2.0'

    // Mocking framework
    testImplementation 'io.mockk:mockk:1.10.0'
    testImplementation 'android.arch.core:core-testing:1.1.1'
}

task generateCodeAnalysisReport {
    group 'Reporting'
    description 'Start reporting code analysis tasks (Jacoco & ktlintCheck)'
    dependsOn ":judokit-android:jacocoTestReport"
    dependsOn ":judokit-android:ktlintCheck"
}

task jacocoTestReport(type: JacocoReport) {
    group 'Reporting'
    description 'Generate Jacoco coverage report for debug build. Only unit test.'

    dependsOn ":judokit-android:test"

    classDirectories.from = files([
            fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/BuildConfig.*',
                               '**/*Test*.*',
                               'android/**/*.*']),
    ])

    def coverageSourceDirs = [
            "$project.projectDir/src/main/java",
    ]

    additionalSourceDirs.from = files(coverageSourceDirs)
    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from = fileTree(dir: project.projectDir,
            includes: [
                    '/build/jacoco/testDebugUnitTest.exec',
            ])

    reports {
        xml.enabled = true
        html.enabled = false
    }
}