apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'jacoco'
apply plugin: 'guru.stefma.bintrayrelease'
apply plugin: "org.jetbrains.dokka-android"

apply from: '../ktlint.gradle'

dokka {
    includeNonPublic = false
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "2.0.6"

        vectorDrawables.useSupportLibrary = true

        consumerProguardFiles 'proguard-rules.pro'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.incremental": "true"]
            }
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        animationsDisabled = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                jacoco.excludes = ['jdk.internal.*']
            }
        }
    }
}

version = android.defaultConfig.versionName
group = 'com.judokit.android'

androidArtifact {
    artifactId = 'judokit-android'
}

publish {
    userOrg = 'judopay'
    desc = 'Android Mobile Payments SDK'
    website = 'https://github.com/JudoPay/JudoKit-Android'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.4'

    api "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation "androidx.core:core:$androidx_core_version"
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation 'com.google.android.material:material:1.2.0'
    implementation 'com.google.android.gms:play-services-wallet:18.0.0'

    // Room and Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'com.judopay:device-dna:1.0.0'
    implementation "com.zapp.library:merchant:1.1.0"
    compileOnly "cards.pay:paycardsrecognizer:$cards_pay_version"

    // JUnit 4 framework
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation "cards.pay:paycardsrecognizer:$cards_pay_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'

    // Mocking framework
    testImplementation 'io.mockk:mockk:1.10.0'
    testImplementation 'android.arch.core:core-testing:1.1.1'

    ktlint 'com.pinterest:ktlint:0.37.2'
}

task generateCodeAnalysisReport {
    group 'Reporting'
    description 'Start reporting code analysis tasks (Jacoco & ktlintCheck)'
    dependsOn ":judokit-android:jacocoTestReport"
    dependsOn ":judokit-android:ktlint"
}

task jacocoTestReport(group: 'verification', description: 'Grenerate Jacoco Reports for all android variants')

project.afterEvaluate {
    def variants = android.hasProperty('libraryVariants') ? android.libraryVariants : android.applicationVariants
    variants.forEach {
        tasks.jacocoTestReport.dependsOn(addJacocoTask(it))
    }
}

def addJacocoTask(variant) {
    def variantName = variant.name.capitalize()
    logger.info("Adding jacoco task for variant $variantName")

    // see https://docs.gradle.org/current/dsl/org.gradle.testing.jacoco.tasks.JacocoReport.html
    def taskName = "jacocoTestReport${variantName}"
    def foundTask = project.tasks.findByName(taskName)
    def jacocoTask = foundTask ? foundTask : project.tasks.create(taskName, JacocoReport)

    jacocoTask.dependsOn("test${variantName}UnitTest")
    jacocoTask.group = 'verification'
    jacocoTask.description = "Generate Jacoco Report for variant $variantName"

    jacocoTask.reports {
        csv.enabled false
        html.enabled true
        xml.enabled true
    }

    def excludedFiles = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Activity.*',
            '**/*Fragment.*',
            '**/*DialogFragment.*',
            '**/*ViewModelFactory.*',
            '**/*View.*',
            '**/*Action*.*',
            '**/*Entity.*',
            '**/*Functions.*',
            '**/*Constants.*',
            '**/adapter/**',
            '**/components/**',
            '**/formatting/**',
            '**/db/JudoRoomDatabase.*',
            '**/db/dao/**',
            '**/model/googlepay/**',
            '**/model/JudoResult.*',
            '**/model/PrimaryAccountDetails.*',
            '**/model/Event.*',
            '**/model/PBBAConfiguration.*',
            '**/model/UiConfiguration.*',
            '**/model/JudoError.*',
            '**/api/factory/**',
            '**/api/AppMetaDataProvider.*',
            '**/api/model/request/Address.*',
            '**/api/model/request/BankSaleRequest.*',
            '**/api/model/request/IdealSaleRequest.*',
            '**/api/model/response/CardVerificationResult.*',
            '**/api/model/response/Consumer.*',
            '**/api/model/response/OrderDetails.*',
            '**/api/model/response/Receipts.*',
            '**/api/model/response/BankSaleResponse.*',
            '**/api/model/EnhancedPaymentDetail.*',
            '**/api/model/ConsumerDevice.*',
            '**/api/model/Browser.*',
            '**/api/model/ClientDetails.*',
            '**/api/model/SDKInfo.*',
            '**/api/model/GeoLocation.*',
            '**/api/model/ThreeDSecure.*',
            '**/api/error/DuplicateTransactionError.*',
            '**/api/error/TokenSecretError.*',
            '**/ui/common/ProgressButton.*',
            '**/ui/common/GooglePayButton.*',
            '**/ui/common/PayByBankButton.*',
            '**/service/polling/PollingResult.*'
    ]

    def sourceDirectories = files(variant.sourceSets.java.srcDirs.flatten())
    def classDirectories = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: excludedFiles)

    if (project.plugins.hasPlugin("kotlin-android")) {
        sourceDirectories.from(files(variant.sourceSets.kotlin.srcDirs.flatten()))
        def kotlinTask = tasks.getByName("compile${variantName}Kotlin")
        if (kotlinTask) {
            classDirectories += fileTree(dir: kotlinTask.destinationDir, excludes: excludedFiles)
        }
    }

    jacocoTask.sourceDirectories.from = sourceDirectories
    jacocoTask.classDirectories.from = classDirectories
    jacocoTask.executionData.from = files("${buildDir}/jacoco/test${variantName}UnitTest.exec")
    jacocoTask
}
