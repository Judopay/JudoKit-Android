version: 2.1

orbs:
  slack: circleci/slack@4.12.5

commands:
  disable_predex:
    steps:
      - run:
          name: Disable Pre-Dexing # https://www.littlerobots.nl/blog/disable-android-pre-dexing-on-ci-builds/
          command: |
            mkdir -p ~/.gradle
            echo 'allprojects {
                  project.plugins.whenPluginAdded { plugin ->
                          if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
                              println "Disable pre dexing for module ${project.name}"
                              project.android.dexOptions.preDexLibraries = false
                          } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
                              println "Disable pre dexing for module ${project.name}"
                              project.android.dexOptions.preDexLibraries = false
                          }
                      }
                  }' > ~/.gradle/init.gradle
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI ran the :android: E2E mobile tests but they *failed*, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n$CIRCLE_SHA1"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI has just *successfully* ran the :android: E2E mobile tests, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n$CIRCLE_SHA1"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }  

executors:
  android:
    docker:
      - image: cimg/android:2022.12
    environment:
      GRADLE_OPTS: -Xmx2g -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

parameters:
  nightly:
    type: boolean
    default: false

jobs:
  build_sdk:
    executor: android
    steps:
      - disable_predex
      - checkout
      - restore_cache:
          keys:
            - judokit-android-{{ checksum "judokit-android/build.gradle" }}
      - run:
          name: Build SDK
          command: ./gradlew :judokit-android:build
      - save_cache:
          key: judokit-android-{{ checksum "judokit-android/build.gradle" }}
          paths:
            - ./build/cache
      - persist_to_workspace:
          root: .
          paths:
            - judokit-android/build

  build_sample:
    executor: android
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-android-examples-{{ checksum "judokit-android-examples/build.gradle" }}
      - run:
          name: Prepare Google Services Json
          command: echo "$ANDROID_GOOGLE_SERVICES_JSON" | base64 -d > judokit-android-examples/google-services.json
      - run:
          name: Prepare Signing Key
          command: |
            echo "$ANDROID_SIGNING_PRIVATE_KEY" | base64 -d > signing.key
            echo "$ANDROID_SIGNING_CERTIFICATE" | base64 -d > signing.crt
            openssl pkcs12 -export -inkey signing.key -in signing.crt -out signing.p12 -passout "pass:$ANDROID_KEYSTORE_PASSWORD"
            keytool -importkeystore -srckeystore signing.p12 -srcstoretype pkcs12 -srcstorepass "$ANDROID_KEYSTORE_PASSWORD" -destkeystore signing.jks -deststoretype JKS -storepass "$ANDROID_KEYSTORE_PASSWORD" -noprompt 2>/dev/null
            echo "storeFile=${PWD}/signing.jks" > ./judokit-android-examples/keystore.properties
            echo "storePassword=${ANDROID_KEYSTORE_PASSWORD}" >> ./judokit-android-examples/keystore.properties
            echo "keyAlias=1" >> ./judokit-android-examples/keystore.properties
            echo "keyPassword=${ANDROID_KEYSTORE_PASSWORD}" >> ./judokit-android-examples/keystore.properties
      - run:
          name: Clone JudoKit-Automation-Scenarios
          command: |
            echo "$GITHUB_SSH_KEY" | base64 -d > ~/.ssh/id_rsa_judoci
            chmod 600 ~/.ssh/id_rsa_judoci
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_judoci -o IdentitiesOnly=yes"
            git clone git@github.com:Judopay/JudoKit-Automation-Scenarios.git \
              judokit-android-examples/src/androidTest/assets
      - run:
          name: Inject Test Credentials
          command: |
            sed -i "s/YOUR-JUDO-ID/$TEST_JUDO_API_ID/g" judokit-android-examples/src/androidTest/assets/test-input-data.json
            sed -i "s/YOUR-TOKEN/$TEST_JUDO_API_TOKEN/g" judokit-android-examples/src/androidTest/assets/test-input-data.json
            sed -i "s/YOUR-SECRET/$TEST_JUDO_API_SECRET/g" judokit-android-examples/src/androidTest/assets/test-input-data.json
            sed -i "s/YOUR-3DS-TOKEN/$TEST_JUDO_API_3DS_TOKEN/g" judokit-android-examples/src/androidTest/assets/test-input-data.json
            sed -i "s/YOUR-3DS-SECRET/$TEST_JUDO_API_3DS_SECRET/g" judokit-android-examples/src/androidTest/assets/test-input-data.json
      - run:
          name: Build Sample App APK
          command: |
            ./gradlew :judokit-android-examples:assemble
      - run:
          name: Build Test Package
          command: |
            ./gradlew :judokit-android-examples:assembleAndroidTest
      - save_cache:
          key: judokit-android-examples-{{ checksum "judokit-android-examples/build.gradle" }}
          paths:
            - ./build/cache
      - persist_to_workspace:
          root: .
          paths:
            - judokit-android-examples/build

  unit_test_sdk:
    executor: android
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - disable_predex
      - run:
          name: Run SDK Unit Tests
          command: ./gradlew :judokit-android:test generateCodeAnalysisReport
      - persist_to_workspace:
          root: .
          paths:
            - judokit-android/build

  # Below step not currently used as no unit tests have been written
  unit_test_sample:
    executor: android
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - disable_predex
      - run:
          name: Run Sample App Unit Tests
          command: ./gradlew :judokit-android-examples:test

  instrumented_test_sample:
    executor: android
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Export environment variables
          command: |
            export JUDO_ID=${JUDO_ID} \
            export API_TEST_TOKEN=${API_TEST_TOKEN} \
            export API_TEST_SECRET=${API_TEST_SECRET} \
      - run:
          name: Test with Firebase Test Lab
          no_output_timeout: 30m
          command: >
            gcloud firebase test android run \
              --app judokit-android-examples/build/outputs/apk/debug/judokit-android-examples-debug.apk \
              --test judokit-android-examples/build/outputs/apk/androidTest/debug/judokit-android-examples-debug-androidTest.apk \
              --results-bucket $FIREBASE_TEST_RESULTS_BUCKET \
              --timeout=30m \
              --device-ids=oriole \
              --os-version-ids=33 \
              --num-flaky-test-attempts=1
      - notify_slack_error
      - notify_slack_pass

  sonar_scan:
    docker:
      - image: europe-docker.pkg.dev/opnf-management/docker/sonar-scanner:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    working_directory: /home/circleci/project
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - run: /opt/run-scan.sh

  release_sample:
    executor: android
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Install Firebase CLI
          command: curl -sL https://firebase.tools | bash
      - run:
          name: Store Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Create Release Notes
          command: echo "$(git log -1 --pretty=format:"%b")" > ./notes.txt
      - run:
          name: Distribute Sample App
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            firebase appdistribution:distribute \
              judokit-android-examples/build/outputs/apk/release/judokit-android-examples-release.apk \
              --app "$ANDROID_FIREBASE_APP_ID" \
              --groups "default-testers" \
              --release-notes-file ./notes.txt

  release_sdk:
    executor: android
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Release SDK to Maven Central
          command: |
            export ORG_GRADLE_PROJECT_signingKey=$(echo "$ORG_GRADLE_PROJECT_signingKey_base64" | base64 -d)
            ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
  report_to_jira:
    docker:
      - image: europe-docker.pkg.dev/opnf-management/docker/deployer:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - run:
          name: Report Deployment to Jira
          environment:
            ENVIRONMENT: << parameters.environment >>
          command: /resources/scripts/report-status-to-jira.sh

workflows:
  version: 2
  build:
    when:
      not: << pipeline.parameters.nightly >>
    jobs:
      - build_sdk:
          filters:
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - build_sample:
          context: shared-secrets
      - instrumented_test_sample:
          context: shared-secrets
          requires:
            - build_sample
          filters:
            branches:
              only:
                - feature/QA-60-ui-tests-on-ci
      - unit_test_sdk:
          requires:
            - build_sdk
      - sonar_scan:
          context: shared-secrets
          requires:
            - unit_test_sdk
      - release_sample:
          context: shared-secrets
          requires:
            - build_sample
            - unit_test_sdk
          filters:
            branches:
              only:
                - master
      - report_to_jira:
          context: shared-secrets
          environment: staging
          requires:
            - release_sample
      - release_sdk:
          context: shared-secrets
          requires:
            - build_sdk
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - report_to_jira:
          context: shared-secrets
          environment: prod
          requires:
            - release_sdk
  e2e-nightly:
    when: << pipeline.parameters.nightly >>
    jobs:
      - build_sample:
          context: shared-secrets
      - instrumented_test_sample:        
          context: shared-secrets
          requires:
            - build_sample
          filters:
            branches:
              only:
                - feature/QA-60-ui-tests-on-ci
