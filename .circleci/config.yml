version: 2.1

orbs:
  android: circleci/android@2.5.0
  slack: circleci/slack@4.12.5
  ruby: circleci/ruby@2.1.0

commands:
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI ran the :android: Android E2E mobile tests but they *failed*, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/JudoKit-Android/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI has just *successfully* ran the :android: Android E2E mobile tests, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/JudoKit-Android/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_error_weekly:
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI ran the :android: Android E2E backward compatibility mobile tests but they *failed*, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/JudoKit-Android/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_pass_weekly:
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI has just *successfully* ran the :android: Android E2E backward compatibility mobile tests, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/JudoKit-Android/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  checkout_project:
    steps:
      - checkout
      - ruby/install-deps
      - android/accept-licenses
      - android/restore-gradle-cache
      - android/restore-build-cache
  persist_project_cache:
    steps:
      - android/save-build-cache
      - android/save-gradle-cache
  prepare_instrumented_tests:
    steps:
      - checkout_project
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Build Example App and Android Test APK
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            bundle exec fastlane build_example_app with_android_test:true
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Export environment variables
          command: |
            export JUDO_ID=${JUDO_ID} \
            export API_TEST_TOKEN=${API_TEST_TOKEN} \
            export API_TEST_SECRET=${API_TEST_SECRET} \
            export RECOMMENDATION_URL=${RECOMMENDATION_URL} \
            export RSA_KEY=${RSA_KEY}

aliases:
  android-docker-executor: &android-docker-executor
    executor:
      name: android/android-docker
      tag: 2024.01.1
      resource-class: xlarge

parameters:
  weekly:
    type: boolean
    default: false

jobs:
  check_pull_request:
    <<: *android-docker-executor
    steps:
      - checkout_project
      - run:
          name: Run pull request checks
          command: bundle exec fastlane pull_request_checks
      - persist_project_cache

  example_app_distribution:
    <<: *android-docker-executor
    steps:
      - checkout_project
      - run:
          name: Store Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Distribute Example App to Testers
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            bundle exec fastlane example_app_distribution
      - persist_project_cache

  release_sdk:
    <<: *android-docker-executor
    steps:
      - checkout_project
      - run:
          name: Release SDK
          command: bundle exec fastlane release_sdk
      - persist_project_cache

  instrumented_test_sample:
    <<: *android-docker-executor
    steps:
      - prepare_instrumented_tests
      - run:
          name: Test with Firebase Test Lab
          no_output_timeout: 30m
          command: >
            gcloud firebase test android run \
              --app judokit-android-examples/build/outputs/apk/debug/judokit-android-examples-debug.apk \
              --test judokit-android-examples/build/outputs/apk/androidTest/debug/judokit-android-examples-debug-androidTest.apk \
              --results-bucket $FIREBASE_TEST_RESULTS_BUCKET \
              --timeout=30m \
              --device model=shiba,version=34 \
              --use-orchestrator \
              --num-flaky-test-attempts=1 \
              --client-details=matrixLabel="Regression E2E"

  instrumented_test_sample_weekly:
    <<: *android-docker-executor
    steps:
      - prepare_instrumented_tests
      - run:
          name: Test with Firebase Test Lab
          no_output_timeout: 30m
          command: >
            gcloud firebase test android run \
              --app judokit-android-examples/build/outputs/apk/debug/judokit-android-examples-debug.apk \
              --test judokit-android-examples/build/outputs/apk/androidTest/debug/judokit-android-examples-debug-androidTest.apk \
              --results-bucket $FIREBASE_TEST_RESULTS_BUCKET \
              --timeout=30m \
              --device model=panther,version=33 \
              --device model=bluejay,version=32 \
              --device model=a51,version=31 \
              --num-flaky-test-attempts=1

  sonar_scan:
    docker:
      - image: europe-docker.pkg.dev/opnf-management/docker/sonar-scanner:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    working_directory: /home/circleci/project
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - run: /opt/run-scan.sh

  report_to_jira:
    docker:
      - image: europe-docker.pkg.dev/opnf-management/docker/deployer:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - run:
          name: Report Deployment to Jira
          environment:
            ENVIRONMENT: << parameters.environment >>
          command: /resources/scripts/report-status-to-jira.sh

workflows:
  version: 2

  pull_request_checks:
    jobs:
      - check_pull_request:
          context: shared-secrets
          filters:
            branches:
              ignore:
                - master

  distribute_example_apps:
    jobs:
      - example_app_distribution:
          context: shared-secrets
          filters:
            branches:
              only:
                - master
      - report_to_jira:
          context: shared-secrets
          environment: staging
          requires:
            - example_app_distribution

  instrumented_test:
    when:
      not: << pipeline.parameters.weekly >>
    jobs:
      - instrumented_test_sample:
          context: shared-secrets
          filters:
            branches:
              only:
                - fix/debug-ui-test-failures

  publish_sdk:
    jobs:
      - release_sdk:
          context: shared-secrets
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - report_to_jira:
          context: shared-secrets
          environment: prod
          requires:
            - release_sdk
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/

  e2e-backward-compat-weekly:
    when: << pipeline.parameters.weekly >>
    jobs:
      - instrumented_test_sample_weekly:
          context: shared-secrets
          filters:
            branches:
              only:
                - fix/debug-ui-test-failures
