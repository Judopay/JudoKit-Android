version: 2.1

orbs:
  android: circleci/android@2.5.0
  slack: circleci/slack@4.12.5
  ruby: circleci/ruby@2.1.0

commands:
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI ran the :android: Android E2E mobile tests but they *failed*, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/JudoKit-Android/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI has just *successfully* ran the :android: Android E2E mobile tests, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/JudoKit-Android/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_error_weekly:
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI ran the :android: Android E2E backward compatibility mobile tests but they *failed*, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/JudoKit-Android/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_pass_weekly:
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI has just *successfully* ran the :android: Android E2E backward compatibility mobile tests, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/opnf-prod/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/JudoKit-Android/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  checkout_project:
    steps:
      - checkout
      - ruby/install-deps
      - android/accept-licenses
      - android/restore-gradle-cache
      - android/restore-build-cache
  persist_project_cache:
    steps:
      - android/save-build-cache
      - android/save-gradle-cache
  prepare_instrumented_tests:
    steps:
      - checkout_project
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Build Example App and Android Test APK
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            bundle exec fastlane build_example_app with_android_test:true
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Export environment variables
          command: |
            export JUDO_ID=${JUDO_ID} \
            export API_TEST_TOKEN=${API_TEST_TOKEN} \
            export API_TEST_SECRET=${API_TEST_SECRET} \
            export RECOMMENDATION_URL=${RECOMMENDATION_URL} \
            export RSA_KEY=${RSA_KEY}

aliases:
  android-docker-executor: &android-docker-executor
    executor:
      name: android/android-docker
      tag: 2024.01.1
      resource-class: xlarge

parameters:
  weekly:
    type: boolean
    default: false
  bs: 
    type: boolean
    default: false

jobs:
  check_pull_request:
    <<: *android-docker-executor
    steps:
      - checkout_project
      - run:
          name: Run pull request checks
          command: bundle exec fastlane pull_request_checks
      - persist_project_cache

  example_app_distribution:
    <<: *android-docker-executor
    steps:
      - checkout_project
      - run:
          name: Store Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Distribute Example App to Testers
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            bundle exec fastlane example_app_distribution build_variants:live,staging
      - persist_project_cache

  release_sdk:
    <<: *android-docker-executor
    steps:
      - checkout_project
      - run:
          name: Release SDK
          command: bundle exec fastlane release_sdk
      - persist_project_cache

  instrumented_test_sample:
    <<: *android-docker-executor
    steps:
      - prepare_instrumented_tests
      - run:
          name: Test with Firebase Test Lab
          no_output_timeout: 30m
          command: >
            gcloud firebase test android run \
              --app judokit-android-examples/build/outputs/apk/debug/judokit-android-examples-debug.apk \
              --test judokit-android-examples/build/outputs/apk/androidTest/debug/judokit-android-examples-debug-androidTest.apk \
              --results-bucket $FIREBASE_TEST_RESULTS_BUCKET \
              --timeout=30m \
              --device model=shiba,version=34 \
              --device model=gta8wifi,version=34 \
              --use-orchestrator \
              --client-details=matrixLabel="Regression E2E" \
              --num-flaky-test-attempts=1
      - notify_slack_error
      - notify_slack_pass

  instrumented_test_sample_weekly_api_31:
    <<: *android-docker-executor
    steps:
      - prepare_instrumented_tests
      - run:
          name: Test with Firebase Test Lab
          no_output_timeout: 30m
          command: >
            gcloud firebase test android run \
              --app judokit-android-examples/build/outputs/apk/debug/judokit-android-examples-debug.apk \
              --test judokit-android-examples/build/outputs/apk/androidTest/debug/judokit-android-examples-debug-androidTest.apk \
              --results-bucket $FIREBASE_TEST_RESULTS_BUCKET \
              --timeout=30m \
              --device model=a12,version=31 \
              --use-orchestrator \
              --client-details=matrixLabel="Backward Compat E2E (API 31)" \
              --test-targets="class com.judokit.android.examples.test.card.CardPaymentTest" \
              --num-flaky-test-attempts=1
      - notify_slack_error_weekly
      - notify_slack_pass_weekly

  instrumented_test_sample_weekly_api_32:
    <<: *android-docker-executor
    steps:
      - prepare_instrumented_tests
      - run:
          name: Test with Firebase Test Lab
          no_output_timeout: 30m
          command: >
            gcloud firebase test android run \
              --app judokit-android-examples/build/outputs/apk/debug/judokit-android-examples-debug.apk \
              --test judokit-android-examples/build/outputs/apk/androidTest/debug/judokit-android-examples-debug-androidTest.apk \
              --results-bucket $FIREBASE_TEST_RESULTS_BUCKET \
              --timeout=30m \
              --device model=bluejay,version=32 \
              --use-orchestrator \
              --client-details=matrixLabel="Backward Compat E2E (API 32)" \
              --test-targets="class com.judokit.android.examples.test.card.CardPaymentTest" \
              --num-flaky-test-attempts=1
      - notify_slack_error_weekly
      - notify_slack_pass_weekly

  instrumented_test_sample_weekly_api_33:
    <<: *android-docker-executor
    steps:
      - prepare_instrumented_tests
      - run:
          name: Test with Firebase Test Lab
          no_output_timeout: 30m
          command: >
            gcloud firebase test android run \
              --app judokit-android-examples/build/outputs/apk/debug/judokit-android-examples-debug.apk \
              --test judokit-android-examples/build/outputs/apk/androidTest/debug/judokit-android-examples-debug-androidTest.apk \
              --results-bucket $FIREBASE_TEST_RESULTS_BUCKET \
              --timeout=30m \
              --device model=panther,version=33 \
              --use-orchestrator \
              --client-details=matrixLabel="Backward Compat E2E (API 33)" \
              --test-targets="class com.judokit.android.examples.test.card.CardPaymentTest" \
              --num-flaky-test-attempts=1
      - notify_slack_error_weekly
      - notify_slack_pass_weekly

  report_to_jira:
    docker:
      - image: europe-docker.pkg.dev/opnf-management/docker/deployer:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - run:
          name: Report Deployment to Jira
          environment:
            ENVIRONMENT: << parameters.environment >>
          command: /resources/scripts/report-status-to-jira.sh

  run_espresso_tests_on_browserstack:
    <<: *android-docker-executor
    steps:
      - prepare_instrumented_tests
      - run:
          name: Export environment variables
          command: |
            export BROWSERSTACK_USERNAME=${BROWSERSTACK_USERNAME} \
            export BROWSERSTACK_ACCESS_KEY=${BROWSERSTACK_ACCESS_KEY} \
            export APP_APK_PATH=judokit-android-examples/build/outputs/apk/debug/judokit-android-examples-debug.apk \
            export TEST_APK_PATH=judokit-android-examples/build/outputs/apk/androidTest/debug/judokit-android-examples-debug-androidTest.apk \
            export BS_UPLOAD_APP_URL="https://api-cloud.browserstack.com/app-automate/espresso/v2/app" \
            export BS_UPLOAD_TEST_SUITE_URL="https://api-cloud.browserstack.com/app-automate/espresso/v2/test-suite" \
            export BS_BUILD_API_URL="https://api-cloud.browserstack.com/app-automate/espresso/v2/build" \
            export BS_BUILD_STATUS_URL_PREFIX="https://api-cloud.browserstack.com/app-automate/espresso/v2/builds" \
            export BS_DASHBOARD_URL_PREFIX="https://app-automate.browserstack.com/dashboard/v2/builds"
      - run:
          name: Upload App APK to BrowserStack (via curl)
          command: |
            echo "Uploading app APK from: $APP_APK_PATH"
            RESPONSE=$(curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
              -X POST "$BS_UPLOAD_APP_URL" \
              -F "file=@$APP_APK_PATH" \
              --output -)
            
            if echo "$RESPONSE" | jq -e '.app_url' >/dev/null; then
              export BS_APP_URL=$(echo "$RESPONSE" | jq -r '.app_url')
              echo "export BS_APP_URL=$BS_APP_URL" >> $BASH_ENV
              echo "Uploaded App URL: $BS_APP_URL"
            else
              echo "Error uploading app APK. Response: $RESPONSE"
              exit 1
            fi

      - run:
          name: Upload Test APK to BrowserStack (via curl)
          command: |
            echo "Uploading test APK from: $TEST_APK_PATH"
            RESPONSE=$(curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
              -X POST "$BS_UPLOAD_TEST_SUITE_URL" \
              -F "file=@$TEST_APK_PATH" \
              --output -)
            
            if echo "$RESPONSE" | jq -e '.test_suite_url' >/dev/null; then
              export BS_TEST_URL=$(echo "$RESPONSE" | jq -r '.test_suite_url')
              echo "export BS_TEST_URL=$BS_TEST_URL" >> $BASH_ENV
              echo "Uploaded Test Suite URL: $BS_TEST_URL"
            else
              echo "Error uploading test APK. Response: $RESPONSE"
              exit 1
            fi

      - run:
          name: Run Espresso Tests on BrowserStack (via curl)
          command: |
            echo "Initiating test run on BrowserStack..."
            BUILD_PAYLOAD='{
              "devices": ["Google Pixel 9-15.0"],
              "app": "'"$BS_APP_URL"'",
              "testSuite": "'"$BS_TEST_URL"'",
              "project": "JudoKit-Android Espresso Tests",
              "build": "JudoKit-Android Espresso Tests #$CIRCLE_BUILD_NUM"
            }'

            RESPONSE=$(curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
              -X POST "$BS_BUILD_API_URL" \
              -d "$BUILD_PAYLOAD" \
              -H "Content-Type: application/json" \
              --output -)
            
            # Check if build initiation was successful and parse build_id
            if echo "$RESPONSE" | jq -e '.build_id' >/dev/null; then
              export BS_BUILD_ID=$(echo "$RESPONSE" | jq -r '.build_id')
              echo "export BS_BUILD_ID=$BS_BUILD_ID" >> $BASH_ENV
              echo "BrowserStack Build ID: $BS_BUILD_ID"
            else
              echo "Error initiating BrowserStack build. Response: $RESPONSE"
              exit 1
            fi

      - run:
          name: Wait for BrowserStack Tests to Complete
          command: |
            echo "Waiting for tests to complete on BrowserStack (Build ID: $BS_BUILD_ID)..."
            STATUS="running"
            MAX_WAIT_SECONDS=1800 # 30 minutes timeout
            START_TIME=$(date +%s)
            
            while [ "$STATUS" == "running" ] || [ "$STATUS" == "queued" ]; do
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
              
              if [ "$ELAPSED_TIME" -ge "$MAX_WAIT_SECONDS" ]; then
                echo "BrowserStack tests timed out after $MAX_WAIT_SECONDS seconds."
                exit 1
              fi

              sleep 15

              STATUS_RESPONSE=$(curl -s -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
                "$BS_BUILD_STATUS_URL_PREFIX}/$BS_BUILD_ID")
              
              STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')
              echo "Current BrowserStack status: $STATUS"
            done

            echo "BrowserStack tests finished with status: $STATUS"
            echo "View results: $BS_DASHBOARD_URL_PREFIX}/$BS_BUILD_ID"

            # Exit with a non-zero code if tests failed
            if [ "$STATUS" != "passed" ]; then
              echo "BrowserStack tests did not pass. Status: $STATUS"
              exit 1
            fi

workflows:
  version: 2

  pull_request_checks:
    jobs:
      - check_pull_request:
          context: shared-secrets
          filters:
            branches:
              ignore:
                - master

  distribute_example_apps:
    jobs:
      - example_app_distribution:
          context: shared-secrets
          filters:
            branches:
              only:
                - master
      - report_to_jira:
          context: shared-secrets
          environment: staging
          requires:
            - example_app_distribution

  instrumented_test:
    when:
      not: << pipeline.parameters.weekly >>
    jobs:
      - instrumented_test_sample:
          context: shared-secrets
          filters:
            branches:
              only:
                - master

  publish_sdk:
    jobs:
      - release_sdk:
          context: shared-secrets
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - report_to_jira:
          context: shared-secrets
          environment: prod
          requires:
            - release_sdk
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/

  e2e-backward-compat-weekly:
    when: << pipeline.parameters.weekly >>
    jobs:
      - instrumented_test_sample_weekly_api_31:
          context: shared-secrets
          filters:
            branches:
              only:
                - master
      - instrumented_test_sample_weekly_api_32:
          context: shared-secrets
          filters:
            branches:
              only:
                - master
      - instrumented_test_sample_weekly_api_33:
          context: shared-secrets
          filters:
            branches:
              only:
                - master

  instrumented_test_bs:
    when: << pipeline.parameters.bs >>
    jobs:
      - run_espresso_tests_on_browserstack:
          context: shared-secrets
          filters:
            branches:
              only:
                - CT-3082
