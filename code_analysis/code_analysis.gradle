apply plugin: "jacoco"
apply plugin: 'pmd'
apply plugin: 'findbugs'

def jacocoFileFilter = ['**/R.class',
                  '**/R$*.class',
                  '**/BuildConfig.*',
                  '**/Manifest*.*',
                  '**/*Test*.*',
                  'android/**/*.*']

task generateCodeAnalysisReport {
    group 'Reporting'
    description 'Start reporting code analysis tasks (Jacoco & PMD & FindBugs)'
    dependsOn ":judo-sdk:assembleDebug"
    dependsOn ":judo-sdk:jacocoTestReport"
    dependsOn ":judo-sdk:pmd"
    dependsOn ":judo-sdk:findbugs"
}

task jacocoTestReport(type: JacocoReport) {
    group 'Reporting'
    description 'Generate Jacoco coverage report for debug build. Only unit test.'

    dependsOn ":judo-sdk:testDebugUnitTest"

    classDirectories = files([
            fileTree(dir: "$project.projectDir/build/intermediates/javac/debug", excludes: jacocoFileFilter),
    ])
    def coverageSourceDirs = [
            "$project.projectDir/src/main/java",
    ]
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(dir: project.projectDir, includes: [
            '/build/jacoco/testDebugUnitTest.exec',
    ])

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    toolVersion = '6.8.0'
}

task pmd(type: Pmd) {
    group 'Reporting'
    description 'Identifying potential problems mainly dead code, duplicated code, cyclomatic complexity and overcomplicated expressions'

    ruleSetFiles = files("$project.projectDir.parent/rules-pmd.xml")
    ruleSets = []
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task findbugs(type: FindBugs) {
    group 'Reporting'
    description 'Static code analysis tool that analyses Java bytecode and detects a wide range of problems.'

    ignoreFailures = true
    effort = "default"
    reportLevel = "medium"
    excludeFilter = new File("$project.projectDir.parent/findbugs-filter.xml")
    classes = files("$project.projectDir/build/intermediates/javac/")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
    }
}