apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 27
        versionName '5.8.0'

        vectorDrawables.useSupportLibrary = true
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    // Flag to tell aapt to keep the attribute ids around
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

publish {
    userOrg = 'judopay'
    groupId = 'com.judopay'
    artifactId = 'android-sdk'
    publishVersion = android.defaultConfig.versionName
    desc = 'Android Mobile Payments SDK'
    website = 'https://github.com/JudoPay/Judo-Android'
}

task(cleanMavenArtifact) {
    doLast {
        def binDir = new File("${System.getProperty('user.home')}/.m2/repository/com/judopay/${publish.artifactId}/${publish.publishVersion}")
        binDir.deleteDir()
    }
}

task androidJavadocs(type: Javadoc) {
    title "Judo Android SDK Documentation"
    options {
        links "https://docs.oracle.com/javase/7/docs/api/"
        linksOffline "https://developer.android.com/reference", "${android.sdkDirectory}/docs/reference"
    }
    options.encoding "utf-8"
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

dependencies {
    implementation 'com.judopay:device-dna:0.10'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.4.0'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'io.reactivex:rxjava:1.3.8'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:support-compat:27.1.1'
    implementation 'com.android.support:support-vector-drawable:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:support-annotations:27.1.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.19.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
}

android.libraryVariants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        def androidJavaDocs = project.tasks['androidJavadocs']
        androidJavaDocs.configure {
            classpath = variant.getCompileClasspath(null) + project.files(project.android.bootClasspath)
            source = variant.sourceSets.collect({ it.javaDirectories }).flatten()
            dependsOn variant.javaCompiler.dependsOn
        }
    }
}
