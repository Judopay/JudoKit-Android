package com.judopay.model

import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.mockito.junit.MockitoJUnitRunner

@RunWith(MockitoJUnitRunner::class)
class CardNetworkTest {
    var cardType: Int = 0
    @Test
    fun shouldDetectJCB() {
        for (i in 3520..3589) {
            cardType = CardNetwork.fromCardNumber(i.toString())
            Assert.assertEquals(CardNetwork.JCB, cardType)
        }
    }

    @Test
    fun shouldDetectDinersClub() {
        val dinersClubPrefixes = "300,301,302,303,304,305,36,38,39,309".split(",")
        for (i in dinersClubPrefixes) {
            cardType = CardNetwork.fromCardNumber(i)
            Assert.assertEquals(CardNetwork.DINERS_CLUB_INTERNATIONAL, cardType)
        }
    }

    @Test
    fun shouldDetectDiscover() {
        val discoverPrefixes =
            "65,6011,644,645,646,647,648,649,6221 26,6221 27,6221 28,6221 29,6221 30,6221 31,6221 32,6221 33,6221 34,6221 35,6221 36,6221 37,6221 38,6221 39,6221 40,6221 41,6221 42,6221 43,6221 44,6221 45,6221 46,6221 47,6221 48,6221 49,6221 50,6221 51,6221 52,6221 53,6221 54,6221 55,6221 56,6221 57,6221 58,6221 59,6221 60,6221 61,6221 62,6221 63,6221 64,6221 65,6221 66,6221 67,6221 68,6221 69,6221 70,6221 71,6221 72,6221 73,6221 74,6221 75,6221 76,6221 77,6221 78,6221 79,6221 80,6221 81,6221 82,6221 83,6221 84,6221 85,6221 86,6221 87,6221 88,6221 89,6221 90,6221 91,6221 92,6221 93,6221 94,6221 95,6221 96,6221 97,6221 98,6221 99,6222 00,6222 01,6222 02,6222 03,6222 04,6222 05,6222 06,6222 07,6222 08,6222 09,6222 10,6222 11,6222 12,6222 13,6222 14,6222 15,6222 16,6222 17,6222 18,6222 19,6222 20,6222 21,6222 22,6222 23,6222 24,6222 25,6222 26,6222 27,6222 28,6222 29,6222 30,6222 31,6222 32,6222 33,6222 34,6222 35,6222 36,6222 37,6222 38,6222 39,6222 40,6222 41,6222 42,6222 43,6222 44,6222 45,6222 46,6222 47,6222 48,6222 49,6222 50,6222 51,6222 52,6222 53,6222 54,6222 55,6222 56,6222 57,6222 58,6222 59,6222 60,6222 61,6222 62,6222 63,6222 64,6222 65,6222 66,6222 67,6222 68,6222 69,6222 70,6222 71,6222 72,6222 73,6222 74,6222 75,6222 76,6222 77,6222 78,6222 79,6222 80,6222 81,6222 82,6222 83,6222 84,6222 85,6222 86,6222 87,6222 88,6222 89,6222 90,6222 91,6222 92,6222 93,6222 94,6222 95,6222 96,6222 97,6222 98,6222 99,6223 00,6223 01,6223 02,6223 03,6223 04,6223 05,6223 06,6223 07,6223 08,6223 09,6223 10,6223 11,6223 12,6223 13,6223 14,6223 15,6223 16,6223 17,6223 18,6223 19,6223 20,6223 21,6223 22,6223 23,6223 24,6223 25,6223 26,6223 27,6223 28,6223 29,6223 30,6223 31,6223 32,6223 33,6223 34,6223 35,6223 36,6223 37,6223 38,6223 39,6223 40,6223 41,6223 42,6223 43,6223 44,6223 45,6223 46,6223 47,6223 48,6223 49,6223 50,6223 51,6223 52,6223 53,6223 54,6223 55,6223 56,6223 57,6223 58,6223 59,6223 60,6223 61,6223 62,6223 63,6223 64,6223 65,6223 66,6223 67,6223 68,6223 69,6223 70,6223 71,6223 72,6223 73,6223 74,6223 75,6223 76,6223 77,6223 78,6223 79,6223 80,6223 81,6223 82,6223 83,6223 84,6223 85,6223 86,6223 87,6223 88,6223 89,6223 90,6223 91,6223 92,6223 93,6223 94,6223 95,6223 96,6223 97,6223 98,6223 99,6224 00,6224 01,6224 02,6224 03,6224 04,6224 05,6224 06,6224 07,6224 08,6224 09,6224 10,6224 11,6224 12,6224 13,6224 14,6224 15,6224 16,6224 17,6224 18,6224 19,6224 20,6224 21,6224 22,6224 23,6224 24,6224 25,6224 26,6224 27,6224 28,6224 29,6224 30,6224 31,6224 32,6224 33,6224 34,6224 35,6224 36,6224 37,6224 38,6224 39,6224 40,6224 41,6224 42,6224 43,6224 44,6224 45,6224 46,6224 47,6224 48,6224 49,6224 50,6224 51,6224 52,6224 53,6224 54,6224 55,6224 56,6224 57,6224 58,6224 59,6224 60,6224 61,6224 62,6224 63,6224 64,6224 65,6224 66,6224 67,6224 68,6224 69,6224 70,6224 71,6224 72,6224 73,6224 74,6224 75,6224 76,6224 77,6224 78,6224 79,6224 80,6224 81,6224 82,6224 83,6224 84,6224 85,6224 86,6224 87,6224 88,6224 89,6224 90,6224 91,6224 92,6224 93,6224 94,6224 95,6224 96,6224 97,6224 98,6224 99,6225 00,6225 01,6225 02,6225 03,6225 04,6225 05,6225 06,6225 07,6225 08,6225 09,6225 10,6225 11,6225 12,6225 13,6225 14,6225 15,6225 16,6225 17,6225 18,6225 19,6225 20,6225 21,6225 22,6225 23,6225 24,6225 25,6225 26,6225 27,6225 28,6225 29,6225 30,6225 31,6225 32,6225 33,6225 34,6225 35,6225 36,6225 37,6225 38,6225 39,6225 40,6225 41,6225 42,6225 43,6225 44,6225 45,6225 46,6225 47,6225 48,6225 49,6225 50,6225 51,6225 52,6225 53,6225 54,6225 55,6225 56,6225 57,6225 58,6225 59,6225 60,6225 61,6225 62,6225 63,6225 64,6225 65,6225 66,6225 67,6225 68,6225 69,6225 70,6225 71,6225 72,6225 73,6225 74,6225 75,6225 76,6225 77,6225 78,6225 79,6225 80,6225 81,6225 82,6225 83,6225 84,6225 85,6225 86,6225 87,6225 88,6225 89,6225 90,6225 91,6225 92,6225 93,6225 94,6225 95,6225 96,6225 97,6225 98,6225 99,6226 00,6226 01,6226 02,6226 03,6226 04,6226 05,6226 06,6226 07,6226 08,6226 09,6226 10,6226 11,6226 12,6226 13,6226 14,6226 15,6226 16,6226 17,6226 18,6226 19,6226 20,6226 21,6226 22,6226 23,6226 24,6226 25,6226 26,6226 27,6226 28,6226 29,6226 30,6226 31,6226 32,6226 33,6226 34,6226 35,6226 36,6226 37,6226 38,6226 39,6226 40,6226 41,6226 42,6226 43,6226 44,6226 45,6226 46,6226 47,6226 48,6226 49,6226 50,6226 51,6226 52,6226 53,6226 54,6226 55,6226 56,6226 57,6226 58,6226 59,6226 60,6226 61,6226 62,6226 63,6226 64,6226 65,6226 66,6226 67,6226 68,6226 69,6226 70,6226 71,6226 72,6226 73,6226 74,6226 75,6226 76,6226 77,6226 78,6226 79,6226 80,6226 81,6226 82,6226 83,6226 84,6226 85,6226 86,6226 87,6226 88,6226 89,6226 90,6226 91,6226 92,6226 93,6226 94,6226 95,6226 96,6226 97,6226 98,6226 99,6227 00,6227 01,6227 02,6227 03,6227 04,6227 05,6227 06,6227 07,6227 08,6227 09,6227 10,6227 11,6227 12,6227 13,6227 14,6227 15,6227 16,6227 17,6227 18,6227 19,6227 20,6227 21,6227 22,6227 23,6227 24,6227 25,6227 26,6227 27,6227 28,6227 29,6227 30,6227 31,6227 32,6227 33,6227 34,6227 35,6227 36,6227 37,6227 38,6227 39,6227 40,6227 41,6227 42,6227 43,6227 44,6227 45,6227 46,6227 47,6227 48,6227 49,6227 50,6227 51,6227 52,6227 53,6227 54,6227 55,6227 56,6227 57,6227 58,6227 59,6227 60,6227 61,6227 62,6227 63,6227 64,6227 65,6227 66,6227 67,6227 68,6227 69,6227 70,6227 71,6227 72,6227 73,6227 74,6227 75,6227 76,6227 77,6227 78,6227 79,6227 80,6227 81,6227 82,6227 83,6227 84,6227 85,6227 86,6227 87,6227 88,6227 89,6227 90,6227 91,6227 92,6227 93,6227 94,6227 95,6227 96,6227 97,6227 98,6227 99,6228 00,6228 01,6228 02,6228 03,6228 04,6228 05,6228 06,6228 07,6228 08,6228 09,6228 10,6228 11,6228 12,6228 13,6228 14,6228 15,6228 16,6228 17,6228 18,6228 19,6228 20,6228 21,6228 22,6228 23,6228 24,6228 25,6228 26,6228 27,6228 28,6228 29,6228 30,6228 31,6228 32,6228 33,6228 34,6228 35,6228 36,6228 37,6228 38,6228 39,6228 40,6228 41,6228 42,6228 43,6228 44,6228 45,6228 46,6228 47,6228 48,6228 49,6228 50,6228 51,6228 52,6228 53,6228 54,6228 55,6228 56,6228 57,6228 58,6228 59,6228 60,6228 61,6228 62,6228 63,6228 64,6228 65,6228 66,6228 67,6228 68,6228 69,6228 70,6228 71,6228 72,6228 73,6228 74,6228 75,6228 76,6228 77,6228 78,6228 79,6228 80,6228 81,6228 82,6228 83,6228 84,6228 85,6228 86,6228 87,6228 88,6228 89,6228 90,6228 91,6228 92,6228 93,6228 94,6228 95,6228 96,6228 97,6228 98,6228 99,6229 00,6229 01,6229 02,6229 03,6229 04,6229 05,6229 06,6229 07,6229 08,6229 09,6229 10,6229 11,6229 12,6229 13,6229 14,6229 15,6229 16,6229 17,6229 18,6229 19,6229 20,6229 21,6229 22,6229 23,6229 24,6229 25".split(
                ","
            )
        for (i in discoverPrefixes) {
            cardType = CardNetwork.fromCardNumber(i)
            Assert.assertEquals(CardNetwork.DISCOVER, cardType)
        }
    }

    @Test
    fun shouldDetectMaestro() {
        val maestroPrefixes =
            "6304,6759,6761,6763,6334,6767,5641 82,6331 10,6333,6759,5600,5602,5603,5610,5611,5656,6700,6706,6773,6775,6709,6771,6773,6775".split(
                ","
            )
        for (i in maestroPrefixes) {
            cardType = CardNetwork.fromCardNumber(i)
            Assert.assertEquals(CardNetwork.MAESTRO, cardType)
        }
    }

    @Test
    fun shouldDetectMastercard() {
        val mastercardPrefixes = "50,51,52,53,54,55".split(",")
        for (i in mastercardPrefixes) {
            cardType = CardNetwork.fromCardNumber(i)
            Assert.assertEquals(CardNetwork.MASTERCARD, cardType)
        }
    }

    @Test
    fun shouldDetectAmex() {
        val amexPrefixes = "34,37".split(",")
        for (i in amexPrefixes) {
            cardType = CardNetwork.fromCardNumber(i)
            Assert.assertEquals(CardNetwork.AMEX, cardType)
        }
    }

    @Test
    fun shouldDetectVisa() {
        cardType = CardNetwork.fromCardNumber("4")
        Assert.assertEquals(CardNetwork.VISA, cardType)
    }
}