require './helpers'

default_platform(:android)

@environments = ['staging', 'production']
@fl_output_dir = ENV['FL_OUTPUT_DIR'] || "#{File.expand_path('..')}/fastlane_output"
@project_root_path = File.expand_path('..')
@sample_apps = [
  SampleApp.new(
    firebase_app_id: {
      production: "1:34238832242:android:977c45c8ec944cb463eceb",
      staging: "1:34238832242:android:50bc19a2f7de31f063eceb"
    },
    google_services_json_b64_var_name: {
      production: "JUDOKIT_PROD_SAMPLE_APP_GOOGLE_SERVICES_JSON_B64",
      staging: "JUDOKIT_STAGING_SAMPLE_APP_GOOGLE_SERVICES_JSON_B64"
    },
    path: "#{@project_root_path}/judokit-android-examples",
  )
]

platform :android do
  desc "Lint SDK"
  lane :lint do
    gradle(task: "ktlintCheck detekt")
  end

  desc "Build the SDK"
  lane :build do
    gradle(task: "clean judokit-android:assemble judokit-android:dokkaJavadoc")
  end

  desc "Run SDK Tests"
  lane :test do
    gradle(task: "clean judokit-android:check")
  end

  desc "Publish the SDK"
  lane :publish do
    if env_vars_valid?([
      "ORG_GRADLE_PROJECT_signingKey_base64",
      "ORG_GRADLE_PROJECT_signingPassword",
      "ORG_GRADLE_PROJECT_sonatypePassword",
      "ORG_GRADLE_PROJECT_sonatypeUsername",
    ])
      ensure_git_status_clean(
        show_uncommitted_changes: true,
        show_diff: true,
        ignore_files: ['.bundle/config']
      )

      gradle(
        task: "clean judokit-android:build judokit-android:dokkaJavadoc publishToSonatype closeAndReleaseSonatypeStagingRepository",
        properties: {
          "signingKey" => Base64.decode64(ENV["ORG_GRADLE_PROJECT_signingKey_base64"])
        }
      )
    else
      UI.user_error!("The variables required for publishing to Sonatype are not set. Cannot continue.")
    end
  end

  desc "Run the pull request checks"
  lane :pr_check do
    lint
    build
    test
    build_sample_apps
  end

  desc "Build Sample Apps"
  lane :build_sample_apps do |options|
    if env_vars_valid?([
      "ANDROID_SIGNING_PRIVATE_KEY",
      "ANDROID_SIGNING_CERTIFICATE",
      "ANDROID_KEYSTORE_PASSWORD",
      "JUDO_API_ID",
      "JUDO_API_SECRET",
      "JUDO_API_TOKEN",
      "RAVELIN_MOCK_SERVER_URL",
      "RSA_PUBLIC_KEY"
    ])
      java_keystore_file = "#{Dir.tmpdir()}/keystore.jks"

      create_java_keystore(
        private_key_b64: ENV["ANDROID_SIGNING_PRIVATE_KEY"],
        certificate_b64: ENV["ANDROID_SIGNING_CERTIFICATE"],
        destination_keystore_file: java_keystore_file,
        keystore_password: ENV["ANDROID_KEYSTORE_PASSWORD"]
      )

      # Required for running the instrumentation tests
      remove_certificate_pinner(sdk_root_path: "#{@project_root_path}/judokit-android")

      @sample_apps.each do |app|
        @environments.select{ |env|
          !options.key?(:environment) || options[:environment] == env
        }.each do |env|
          UI.message(env)
          build_sample_app({
            app: app,
            environment: env,
            keystore_file: java_keystore_file
          }) if !app.firebase_app_id(environment: env).nil?
        end
      end

      restore_certificate_pinner(sdk_root_path: "#{@project_root_path}/judokit-android")
    else
      UI.user_error!("The variables required for building sample apps are not set. Cannot continue.")
    end
  end

  desc "Build a Sample App"
  private_lane :build_sample_app do |options|
    options[:app].prepare_google_services_json(environment: options[:environment])

    inject_staging_environment(
      app: options[:app],
      sdk_root_path: "#{@project_root_path}/judokit-android"
    ) if options[:environment] == 'staging'

    latest_release = firebase_app_distribution_get_latest_release(
      app: options[:app].firebase_app_id(environment: options[:environment])
    )

    gradle(
      task: "#{options[:app].app_name}:assemble #{options[:app].app_name}:assembleAndroidTest",
      properties: {
        "android.injected.version.code" => latest_release.nil? ? 1 : latest_release[:buildVersion].to_i + 1,
        "android.injected.signing.store.file" => options[:keystore_file],
        "android.injected.signing.store.password" => ENV['ANDROID_KEYSTORE_PASSWORD'],
        "android.injected.signing.key.alias" => "1",
        "android.injected.signing.key.password" => ENV['ANDROID_KEYSTORE_PASSWORD'],
        "applicationIdSuffix" => options[:environment] == "staging" ? "staging" : ""
      }
    )

    revert_staging_environment(
      app: options[:app],
      sdk_root_path: "#{@project_root_path}/judokit-android"
    ) if options[:environment] == 'staging'

    options[:app].copy_apks_to_destination(environment: options[:environment], destination: @fl_output_dir)
  end

  desc "Run instrumented tests for sample apps on Firebase"
  lane :test_sample_apps_firebase do |options|
    @sample_apps.each do |app|
      test_sample_app_firebase({app: app, environment: "production"})
    end
  end

  desc "Run instrumented tests for a sample app on Firebase"
  private_lane :test_sample_app_firebase do |options|
    if env_vars_valid?([
      "FIREBASE_TEST_RESULTS_BUCKET",
    ])
      sh(
        "gcloud firebase test android run"\
          " --app #{@fl_output_dir}/#{options[:app].debug_apk(environment: options[:environment])}"\
          " --test #{@fl_output_dir}/#{options[:app].testsuite_apk(environment: options[:environment])}"\
          " --device model=shiba,version=34"\
          " --device model=gta8wifi,version=34"\
          " --device model=panther,version=33"\
          " --device model=bluejay,version=32"\
          " --device model=a12,version=31"\
          " --use-orchestrator"\
          " --record-video"\
          " --results-bucket #{ENV['FIREBASE_TEST_RESULTS_BUCKET']}"\
          " --client-details=#{[
              "matrixLabel=\"#{ENV['FIREBASE_MATRIX_LABEL'] || "Manual Trigger"}\"",
              "app=\"#{options[:app].app_name}\"",
              "project=JudoKit-Android"
            ].join(",")}"\
          " --timeout=30m"\
          " --num-flaky-test-attempts=1"\
          " --async"
      )
    else
      UI.user_error!("The variables required for testing sample apps in Firebase are not set. Cannot continue.")
    end
  end

  desc "Run instrumented tests for sample apps on BrowserStack"
  lane :test_sample_apps_browserstack do |options|
    if env_vars_valid?([
      "BROWSERSTACK_USERNAME",
      "BROWSERSTACK_ACCESS_KEY"
    ])
      @sample_apps.each do |app|
        test_sample_app_browserstack({app: app, environment: "production"})
      end
    else
      UI.user_error!("The variables required for testing sample apps in Browserstack are not set. Cannot continue.")
    end
  end

  desc "Run instrumented tests for a sample app on BrowserStack"
  private_lane :test_sample_app_browserstack do |options|
    upload_to_browserstack_app_automate(
      browserstack_username: ENV["BROWSERSTACK_USERNAME"],
      browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
      file_path: "#{@fl_output_dir}/#{options[:app].debug_apk(environment: options[:environment])}"
    )

    app_url = ENV["BROWSERSTACK_APP_ID"]

    test_suite_url = upload_testsuite_to_browserstack(
      browserstack_username: ENV["BROWSERSTACK_USERNAME"],
      browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
      file_path: "#{@fl_output_dir}/#{options[:app].testsuite_apk(environment: options[:environment])}"
    )

    run_testsuite_on_browserstack(
      browserstack_username: ENV["BROWSERSTACK_USERNAME"],
      browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
      app_url: app_url,
      test_suite_url: test_suite_url,
      devices: [
        "OnePlus 8-10.0",
        "Samsung Galaxy S25 Ultra-15.0",
        "Samsung Galaxy S21-11.0",
        "Samsung Galaxy A10-9.0",
        "Samsung Galaxy S9-8.0"
      ],
      project: "JudoKit-Android UI Tests",
      build_tag: "JudoKit-Android",
      annotation: ["com.judokit.android.examples.test.card.annotations.SmokeTest"]
    )
  end

  desc "Publish Sample Apps to Firebase"
  lane :publish_sample_apps do |options|
    @sample_apps.each do |app|
      @environments.select{ |env|
        !options.key?(:environment) || options[:environment] == env
      }.each do |env|
        publish_sample_app({app: app, environment: env})
      end
    end
  end

  desc "Publish Sample App to Firebase"
  private_lane :publish_sample_app do |options|
    if options[:app].firebase_app_id(environment: options[:environment]).nil?
      UI.important("No Firebase App ID found for #{options[:app].app_name} and environment #{options[:environment]}. Won't publish.")
      next
    end
    firebase_app_distribution({
      android_artifact_path: "#{@fl_output_dir}/#{options[:app].release_apk(environment: options[:environment])}",
      app: options[:app].firebase_app_id(environment: options[:environment]),
      groups: 'default-testers',
      release_notes: changelog_from_git_commits(commits_count: 1),
    })
  end
end
